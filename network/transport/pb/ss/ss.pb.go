// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.1
// source: ss.proto

package ss

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint32            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UID     uint64            `protobuf:"varint,2,opt,name=UID,proto3" json:"UID,omitempty"`
	Cmd     string            `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	MsgType uint32            `protobuf:"varint,4,opt,name=msgType,proto3" json:"msgType,omitempty"`
	Seq     uint32            `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
	Options map[string][]byte `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    *any.Any          `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ss_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ss_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ss_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Message) GetUID() uint64 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *Message) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *Message) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *Message) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Message) GetOptions() map[string][]byte {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Message) GetBody() *any.Any {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_ss_proto protoreflect.FileDescriptor

var file_ss_proto_rawDesc = []byte{
	0x0a, 0x08, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x73, 0x73, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0x32, 0x0a, 0x03, 0x52, 0x50, 0x43, 0x12, 0x2b, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0b, 0x2e, 0x73, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ss_proto_rawDescOnce sync.Once
	file_ss_proto_rawDescData = file_ss_proto_rawDesc
)

func file_ss_proto_rawDescGZIP() []byte {
	file_ss_proto_rawDescOnce.Do(func() {
		file_ss_proto_rawDescData = protoimpl.X.CompressGZIP(file_ss_proto_rawDescData)
	})
	return file_ss_proto_rawDescData
}

var file_ss_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ss_proto_goTypes = []interface{}{
	(*Message)(nil), // 0: ss.Message
	nil,             // 1: ss.Message.OptionsEntry
	(*any.Any)(nil), // 2: google.protobuf.Any
}
var file_ss_proto_depIdxs = []int32{
	1, // 0: ss.Message.options:type_name -> ss.Message.OptionsEntry
	2, // 1: ss.Message.body:type_name -> google.protobuf.Any
	0, // 2: ss.RPC.Transport:input_type -> ss.Message
	0, // 3: ss.RPC.Transport:output_type -> ss.Message
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ss_proto_init() }
func file_ss_proto_init() {
	if File_ss_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ss_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ss_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ss_proto_goTypes,
		DependencyIndexes: file_ss_proto_depIdxs,
		MessageInfos:      file_ss_proto_msgTypes,
	}.Build()
	File_ss_proto = out.File
	file_ss_proto_rawDesc = nil
	file_ss_proto_goTypes = nil
	file_ss_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCClient interface {
	Transport(ctx context.Context, opts ...grpc.CallOption) (RPC_TransportClient, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Transport(ctx context.Context, opts ...grpc.CallOption) (RPC_TransportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[0], "/ss.RPC/Transport", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCTransportClient{stream}
	return x, nil
}

type RPC_TransportClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type rPCTransportClient struct {
	grpc.ClientStream
}

func (x *rPCTransportClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCTransportClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCServer is the server API for RPC service.
type RPCServer interface {
	Transport(RPC_TransportServer) error
}

// UnimplementedRPCServer can be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (*UnimplementedRPCServer) Transport(RPC_TransportServer) error {
	return status.Errorf(codes.Unimplemented, "method Transport not implemented")
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Transport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).Transport(&rPCTransportServer{stream})
}

type RPC_TransportServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type rPCTransportServer struct {
	grpc.ServerStream
}

func (x *rPCTransportServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCTransportServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ss.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transport",
			Handler:       _RPC_Transport_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ss.proto",
}
